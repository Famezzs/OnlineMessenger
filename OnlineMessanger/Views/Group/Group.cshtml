@using System.Security.Claims
@using Microsoft.AspNetCore.Http;
@inject IHttpContextAccessor HttpContextAccessor
@{
    string groupOwner = HttpContextAccessor.HttpContext.Session.GetString("GroupOwner");

    string userId = User.FindFirstValue(ClaimTypes.NameIdentifier);

    string groupName = HttpContextAccessor.HttpContext.Session.GetString("GroupName");
}

@model List<MessageRepresentation>

<div class="context-menu">
    <div class="context-menu__editbtn" data-request-url="@Url.Action("SetMessageId","Group")">Edit</div>
    <div class="context-menu__divider"></div>
    <div class="context-menu__delbtn">Delete for self</div>
    <div class="context-menu__delforevrbtn" data-request-url="@Url.Action("DeleteMessage","Group")">Delete for everyone</div>
</div>

@if (!String.IsNullOrWhiteSpace(groupName))
{
    <div style="height: 100px">
        <h2 class="text-center">@groupName</h2>
    </div>
}

<div class="context-menu" id="reply-menu">
    <div class="context-menu__replybtn" id="reply">Reply</div>
    <div class="context-menu__replybtn" id="reply-privately">Reply Privately</div>
</div>

<div class="universal-form" style="display: none; background-color: white;">

    <div class="close-button" id="close-manage-users-menu"></div>

    <p>
        <b>Member list:</b>
    </p>

    <div class="universal-form-fields" id="member-list">
    </div>

    <div style="display: block; height: 30px;"></div>

    <div class="universal-form-fields">
        <div class="universal-field">
            <p>User's Email *</p>
            <input type="text" name="email" id="manage-users-input">
        </div>
    </div>

    <button type="button" class="invite-user-button" id="invite-submit-button">Invite</button>

    @if (userId == groupOwner)
    {
        <button type="button" class="remove-user-button" id="remove-member-submit-button">Remove</button>
    }

    <div class="universal-error-message" style="display: none">
    </div>
</div>

@using (Html.BeginForm("LoadNewMessages", "Group"))
{
    <div class="centered-div">
        <input type="submit" value="Load older messages" title="Load older messages" onclick="saveScroll()" />
        <button type="button" class="manage-users-button">Manage Users</button>
    </div>
}

@if (Model != null)
{
    <ul style="list-style-type: none">
        @foreach (var message in Model)
        {
            @if (message.Message.IsDeletedForSelf &&
           message.Message.OwnerId == userId)
            {
                continue;
            }

            @if (message.Message.OwnerId == userId)
            {
                <li class="message-item" oncontextmenu="configureContextMenu(event)" id="@message.Message.Id">

                    @if (groupOwner == userId)
                    {
                        <b id="@message.Message.Id">@message.OwnerName (Owner) (you)</b>
                    }
                    else
                    {
                        <b id="@message.Message.Id">@message.OwnerName (you)</b>
                    }

                    <b id="@message.Message.Id">@message.Message.Created</b>

                    @if (message.Message.IsEdited == true)
                    {
                        <b id="@message.Message.Id">(Edited)</b>
                    }

                    <p id="@message.Message.Id">
                        @message.Message.Contents
                    </p>

                    @if (message.ReplyTo != null)
                    {
                        <b id="@message.Message.Id">In reply to:</b>
                        <div class="message-item" id="@message.Message.Id">

                            <b id="@message.Message.Id">@message.ReplyTo.ReplyToMessageId</b>

                            <b id="@message.Message.Id">@message.ReplyTo.Created</b>

                            @if (message.ReplyTo.IsEdited == true)
                            {
                                <b id="@message.Message.Id">(Edited)</b>
                            }

                            <p id="@message.Message.Id">
                                @message.ReplyTo.Contents
                            </p>
                        </div>
                    }
                </li>
            }
            else
            {
                <li class="message-item" oncontextmenu="configureReplyMenu(event)" id="@message.Message.Id">

                    @if (groupOwner == message.Message.OwnerId)
                    {
                        <b id="@message.Message.Id">@message.OwnerName (Owner)</b>
                    }
                    else
                    {
                        <b id="@message.Message.Id">@message.OwnerName</b>
                    }

                    <b id="@message.Message.Id">@message.Message.Created</b>

                    @if (message.Message.IsEdited == true)
                    {
                        <b id="@message.Message.Id">(Edited)</b>
                    }

                    <p id="@message.Message.Id">
                        @message.Message.Contents
                    </p>

                    @if (message.ReplyTo != null)
                    {
                        <b id="@message.Message.Id">In reply to:</b>
                        <div class="message-item" id="@message.Message.Id">

                            <b id="@message.Message.Id">@message.ReplyTo.ReplyToMessageId</b>

                            <b id="@message.Message.Id">@message.ReplyTo.Created</b>

                            @if (message.ReplyTo.IsEdited == true)
                            {
                                <b id="@message.Message.Id">(Edited)</b>
                            }

                            <p id="@message.Message.Id">
                                @message.ReplyTo.Contents
                            </p>
                        </div>
                    }
                </li>
            }
        }
    </ul>
}

<div style="height: 100px; margin-bottom: 40px;"></div>

@using (Html.BeginForm("MessageHandler", "Group", FormMethod.Post))
{
    <div class="message-menu" id="message-menu">
        <textarea placeholder="Enter your message" value="@ViewData["Message"]" name="messageString"
              oninput='this.style.height = "";this.style.height = this.scrollHeight + "px"'></textarea>
        <span>
            <input type="submit" value="Send" title="Send" onclick="saveScroll()" id="message-menu-submit" />
            <button type="button" class="refresh-button" onclick="refreshMessages()">Refresh</button>
        </span>
    </div>
}

@using (Html.BeginForm("EditMessage", "Group", FormMethod.Post))
{
    <div class="edit-message-menu" id="edit-message-menu">
        <textarea value="@ViewData["EditMessage"]" name="newContents" id="edit-message-input"
              oninput='this.style.height = "";this.style.height = this.scrollHeight + "px"'></textarea>
        <span>
            <input type="submit" value="Confirm" title="Confirm" onclick="saveScroll()" />
        </span>
    </div>
}

<script>

    let scrollPosition = window.sessionStorage.getItem("sidebar-scroll");

    let currentMessageId = "";

    const contextMenu = document.querySelector('.context-menu');

    const replyMenu = document.getElementById('reply-menu');

    const replyButton = document.getElementById('reply');

    const replyPrivatelyButton = document.getElementById('reply-privately');

    const sendMessageMenu = document.querySelector('.message-menu');

    const sendMessageMenuSubmit = document.getElementById('message-menu-submit');

    const inviteForm = document.querySelector('.universal-form');

    const manageUsersFormInput = document.getElementById('manage-users-input');

    const inviteSubmitButton = document.getElementById('invite-submit-button');

    const inviteButton = document.querySelector('.manage-users-button');

    const closeManageUsersMenu = document.getElementById('close-manage-users-menu');

    const editMessageMenu = document.querySelector('.edit-message-menu');

    const editMessageButton = document.querySelector('.context-menu__editbtn');

    const editMessageInput = document.getElementById('edit-message-input');

    const deleteForAllButton = document.querySelector('.context-menu__delforevrbtn');

    const deleteForSelfButton = document.querySelector('.context-menu__delbtn');

    const errorNotification = document.querySelector('.universal-error-message');

    const removeUserButton = document.querySelector('.remove-user-button');

    const memberList = document.getElementById('member-list');

    function saveScroll() {
        window.sessionStorage.setItem("sidebar-scroll", window.scrollY);
    }

    if (scrollPosition !== null) {
        autoScrollTo(scrollPosition);
    }

    function autoScrollTo(scrollPosition) {

        document.documentElement.style.scrollBehavior = 'auto';

        setTimeout(() => window.scrollTo(0, scrollPosition), 1);
        setTimeout(() => document.documentElement.style.scrollBehavior = 'smooth', 1);
    }

    function showContextMenu(show = true) {
        contextMenu.style.display = show ? 'block' : 'none';
    }

    function showReplyMenu(show = true) {
        replyMenu.style.display = show ? 'block' : 'none';
    }

    function showSendMessageMenu(show = true) {
        sendMessageMenu.style.display = show ? 'inline-block' : 'none';
    }

    function showEditMessageMenu(show = true) {
        editMessageMenu.style.display = show ? 'inline-block' : 'none';
    }

    function showInviteForm(show = true) {

        if (!show) {

            manageUsersFormInput.value = null;

            inviteForm.style.display = show ? 'table' : 'none';

        } else {

            $.ajax({
                type: 'GET',
                url: '@Url.Action("GetMembersOfGroup", "Group")'

            }).done((result) => {

                memberList.innerHTML = result;

                inviteForm.style.display = show ? 'table' : 'none';
            });
        }
    }

    function showErrorNotification(show = true) {
        errorNotification.style.display = show ? 'block' : 'none';
    }

    function configureContextMenu(event) {

        showReplyMenu(false);

        showContextMenu();

        contextMenu.style.top = event.pageY + "px";

        contextMenu.style.left = event.pageX + "px";

        currentMessageId = event.target.id;
    }

    function configureReplyMenu(event) {

        showContextMenu(false);

        showReplyMenu();

        replyMenu.style.top = event.pageY + "px";

        replyMenu.style.left = event.pageX + "px";

        currentMessageId = event.target.id;
    }

    function refreshMessages() {

        saveScroll();

        location.reload();
    }

    function switchSubmitMessageButton() {
        sendMessageMenuSubmit.value = "Reply";

        sendMessageMenuSubmit.style.backgroundColor = 'blue';

        sendMessageMenuSubmit.style.color = 'white';

        sendMessageMenuSubmit.style.border = '1px solid black';

        sendMessageMenuSubmit.style.borderRadius = '2px';
    }

    window.addEventListener('contextmenu', (event) => {
        event.preventDefault();
    });

    window.addEventListener('click', () => {
        showContextMenu(false);
        showReplyMenu(false);
    });

    editMessageButton.addEventListener('click', () => {

        $.ajax({
            type: 'POST',
            url: editMessageButton.dataset.requestUrl,
            data: {
                'messageId': currentMessageId
            }
        }).done((result) => {
            showSendMessageMenu(false);

            editMessageInput.value = result;

            showEditMessageMenu(true);
        });
    })

    deleteForAllButton.addEventListener('click', () => {

        saveScroll();

        $.ajax({
            type: 'POST',
            url: deleteForAllButton.dataset.requestUrl,
            data: {
                'messageId': currentMessageId
            }
        }).done(() => {
            refreshMessages();
        });
    });

    deleteForSelfButton.addEventListener('click', () => {

        saveScroll();

        $.ajax({
            type: 'POST',
            url: '@Url.Action("DeleteMessageForSelf","Group")',
            data: {
                'messageId': currentMessageId
            }
        }).done(() => {
            refreshMessages();
        });
    });

    inviteButton.addEventListener('click', () => {
        showInviteForm();
    });

    inviteSubmitButton.addEventListener('click', () => {

        saveScroll();

        $.ajax({
            type: 'POST',
            url: '@Url.Action("Invite","Group")',
            data: {
                'email': manageUsersFormInput.value
            }
        }).done((error) => {

            if (error) {

                errorNotification.innerHTML = error;

                showErrorNotification();
            } else {

                alert('Success!');

                errorNotification.innerHTML = null;

                showErrorNotification(false);

                showInviteForm(false);
            }
        });
    });

    replyButton.addEventListener('click', () => {

        saveScroll();

        switchSubmitMessageButton();

        $.ajax({
            type: 'POST',
            url: '@Url.Action("SetReplyMode","Group")',
            data: {
                'messageId': currentMessageId,
                'replyMode': 'pub'
            }
        }).done(() => {

        });
    });

    replyPrivatelyButton.addEventListener('click', () => {

        saveScroll();

        switchSubmitMessageButton();

        $.ajax({
            type: 'POST',
            url: '@Url.Action("SetReplyMode","Group")',
            data: {
                'messageId': currentMessageId,
                'replyMode': 'pri'
            }
        }).done(() => {

        });
    });

    closeManageUsersMenu.addEventListener('click', () => {
        showInviteForm(false);
    });

    if (removeUserButton != null) {
        removeUserButton.addEventListener('click', () => {

            saveScroll();

            $.ajax({
                type: 'POST',
                url: '@Url.Action("RemoveMember","Group")',
                data: {
                    'email': manageUsersFormInput.value
                }
            }).done((error) => {

                if (error) {

                    errorNotification.innerHTML = error;

                    showErrorNotification();
                } else {

                    alert('Success!');

                    errorNotification.innerHTML = null;

                    showErrorNotification(false);

                    showInviteForm(false);
                }
            });
        });
    }

</script>
