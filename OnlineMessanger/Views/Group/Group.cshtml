@using System.Security.Claims
@model List<MessageRepresentation>

<div class="context-menu">
    <div class="context-menu__editbtn">Edit</div>
    <div class="context-menu__replybtn">Reply</div>
    <div class="context-menu__divider"></div>
    <div class="context-menu__delbtn">Delete for self</div>
    <div class="context-menu__delforevrbtn">Delete for everyone</div>
</div>

@using (Html.BeginForm("LoadNewMessages", "Group"))
{
    <div class="centered-div">
        <input type="submit" value="Load older messages" title="Load older messages" onclick="saveScroll()" />
        <button type="button" class="manage-users-button">Manage Users</button>
    </div>
}

@if (Model != null)
{
    <ul style="list-style-type: none">
        @foreach (var message in Model)
        {
            var userId = User.FindFirstValue(ClaimTypes.NameIdentifier);

            var groupOwner = TempData["GroupOwner"];

            @if (message.Message.IsDeletedForSelf &&
           message.Message.OwnerId == userId)
            {
                continue;
            }

            @if (message.Message.OwnerId == userId)
            {
                <li class="message-item" oncontextmenu="configureContextMenu(event)" id="@message.Message.Id">

                    @if (groupOwner != null &&
                   groupOwner.ToString() == userId)
                    {
                        <b id="@message.Message.Id">@message.OwnerName (Owner) (you)</b>
                    }
                    else
                    {
                        <b id="@message.Message.Id">@message.OwnerName (you)</b>
                    }

                    <b id="@message.Message.Id">@message.Message.Created</b>

                    @if (message.Message.IsEdited == true)
                    {
                        <b id="@message.Message.Id">(Edited)</b>
                    }

                    <p id="@message.Message.Id">
                        @message.Message.Contents
                    </p>
                </li>
            }
            else
            {
                <li class="message-item">

                    @if (groupOwner != null &&
                   groupOwner.ToString() == message.Message.OwnerId)
                    {
                        <b>@message.OwnerName (Owner)</b>
                    }
                    else
                    {
                        <b>@message.OwnerName</b>
                    }

                    <b>@message.Message.Created</b>

                    @if (message.Message.IsEdited == true)
                    {
                        <b>(Edited)</b>
                    }

                    <p>
                        @message.Message.Contents
                    </p>
                </li>
            }
        }
    </ul>
}

@using (Html.BeginForm("SendMessage", "Group", FormMethod.Post))
{
    <div class="message-menu" id="message-menu">
        <textarea placeholder="Enter your message" value="@ViewData["Message"]" name="messageString"
              oninput='this.style.height = "";this.style.height = this.scrollHeight + "px"'></textarea>
        <label>
            <input type="submit" value="Send" title="Send" onclick="saveScroll()" />
            <button type="button" class="refresh-button" onclick="refreshMessages()">Refresh</button>
        </label>
    </div>
}

@using (Html.BeginForm("EditMessage", "Group", FormMethod.Post))
{
    <div class="edit-message-menu" id="edit-message-menu">
        <textarea value="@ViewData["EditMessage"]" name="newContents" id="edit-message-input"
              oninput='this.style.height = "";this.style.height = this.scrollHeight + "px"'></textarea>
        <label>
            <input type="submit" value="Confirm" title="Confirm" onclick="saveScroll()" />
        </label>
    </div>
}


<div class="universal-form" style="display: none">

    <div class="universal-form-fields">
        <div class="universal-field">
            <p>User's Email *</p>
            <input type="text" name="email" id="manage-users-input">
        </div>
    </div>

    <button type="button" id="invite-submit-button">Invite</button>

    @if (TempData["GroupOwner"] != null &&
    User.FindFirstValue(ClaimTypes.NameIdentifier) == TempData["GroupOwner"].ToString())
    {
        <button type="button" id="remove-member-submit-button">Remove</button>
    }

    <div class="universal-error-message" style="display: none">
    </div>
</div>


<script>

    let scrollPosition = window.sessionStorage.getItem("sidebar-scroll");

    let currentMessageId = "";

    const contextMenu = document.querySelector('.context-menu');

    const sendMessageMenu = document.querySelector('.message-menu');

    const inviteForm = document.querySelector('.universal-form');

    const manageUsersFormInput = document.getElementById('manage-users-input');

    const inviteSubmitButton = document.getElementById('invite-submit-button');

    const inviteButton = document.querySelector('.manage-users-button');

    const editMessageMenu = document.querySelector('.edit-message-menu');

    const editMessageButton = document.querySelector('.context-menu__editbtn');

    const editMessageInput = document.getElementById('edit-message-input');

    const deleteForAllButton = document.querySelector('.context-menu__delforevrbtn');

    const deleteForSelfButton = document.querySelector('.context-menu__delbtn');

    const errorNotification = document.querySelector('.universal-error-message');

    function saveScroll() {
        window.sessionStorage.setItem("sidebar-scroll", window.scrollY);
    }

    if (scrollPosition !== null) {
        autoScrollTo(scrollPosition);
    }

    function autoScrollTo(scrollPosition) {

        document.documentElement.style.scrollBehavior = 'auto';

        setTimeout(() => window.scrollTo(0, scrollPosition), 0.1);
        setTimeout(() => document.documentElement.style.scrollBehavior = 'smooth', 0.1);
    }

    function showContextMenu(show = true) {
        contextMenu.style.display = show ? 'block' : 'none';
    }

    function showSendMessageMenu(show = true) {
        sendMessageMenu.style.display = show ? 'inline-block' : 'none';
    }

    function showEditMessageMenu(show = true) {
        editMessageMenu.style.display = show ? 'inline-block' : 'none';
    }

    function showInviteForm(show = true) {
        inviteForm.style.display = show ? 'table' : 'none';
    }

    function showErrorNotification(show = true) {
        errorNotification.style.display = show ? 'block' : 'none';
    }

    function configureContextMenu(event) {

        showContextMenu();

        contextMenu.style.top = event.pageY + "px";

        contextMenu.style.left = event.pageX + "px";

        currentMessageId = event.target.id;
    }

    function refreshMessages() {
        window.location = '@Url.Action("ViewGroup","Group")';
    }

    window.addEventListener('contextmenu', (event) => {
        event.preventDefault();
    });

    window.addEventListener('click', () => {
        showContextMenu(false);
    });

    editMessageButton.addEventListener('click', () => {

        $.ajax({
            type: 'POST',
            url: '@Url.Action("SetMessageId","Group")',
            data: {
                'messageId': currentMessageId
            }
        }).done((result) => {
            showSendMessageMenu(false);

            editMessageInput.value = result;

            showEditMessageMenu(true);
        });
    })

    deleteForAllButton.addEventListener('click', () => {

        saveScroll();

        $.ajax({
            type: 'POST',
            url: '@Url.Action("DeleteMessage","Group")',
            data: {
                'messageId': currentMessageId
            }
        }).done(() => {
            refreshMessages();
        });
    });

    deleteForSelfButton.addEventListener('click', () => {

        saveScroll();

        $.ajax({
            type: 'POST',
            url: '@Url.Action("DeleteMessageForSelf","Group")',
            data: {
                'messageId': currentMessageId
            }
        }).done(() => {
            refreshMessages();
        });
    });

    inviteButton.addEventListener('click', () => {
        showInviteForm();
    });

    inviteSubmitButton.addEventListener('click', () => {

        saveScroll();

        $.ajax({
            type: 'POST',
            url: '@Url.Action("Invite","Group")',
            data: {
                'email': manageUsersFormInput.value
            }
        }).done((error) => {

            if (error) {
                alert(error);

                errorNotification.innerHTML = error;

                showErrorNotification();
            } else {

                showInviteForm(false);

                manageUsersFormInput.value = null;
            }
        });
    });

</script>
