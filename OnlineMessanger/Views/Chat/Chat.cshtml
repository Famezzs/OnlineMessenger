@using System.Security.Claims
@model List<MessageRepresentation>
@inject IHttpContextAccessor HttpContextAccessor
@{
    string userId = User.FindFirstValue(ClaimTypes.NameIdentifier);

    string chatName = HttpContextAccessor.HttpContext.Session.GetString("ChatName");
}

<div class="context-menu">
    <div class="context-menu__editbtn">Edit</div>
    <div class="context-menu__divider"></div>
    <div class="context-menu__delbtn">Delete for self</div>
    <div class="context-menu__delforevrbtn">Delete for everyone</div>
</div>

@if (!String.IsNullOrWhiteSpace(chatName))
{
    <div style="height: 100px">
        <h2 class="text-center">@chatName</h2>
    </div>
}

@using (Html.BeginForm("LoadNewMessages", "Chat"))
{
    <div class="centered-div">
        <input type="submit" value="Load older messages" title="Load older messages" onclick="saveScroll()" />
    </div>
}

@if (Model != null)
{
    <ul style="list-style-type: none">
        @foreach (var message in Model)
        {
            @if (message.Message.IsDeletedForSelf &&
           message.Message.OwnerId == userId)
            {
                continue;
            }

            @if (message.Message.OwnerId == userId)
            {
                <li class="message-item" oncontextmenu="configureContextMenu(event)" id="@message.Message.Id">

                    <b id="@message.Message.Id">@message.OwnerName (you)</b>
                    <b id="@message.Message.Id">@message.Message.Created</b>

                    @if (message.Message.IsEdited == true)
                    {
                        <b id="@message.Message.Id">(Edited)</b>
                    }

                    <p id="@message.Message.Id">
                        @message.Message.Contents
                    </p>

                    @if (message.ReplyTo != null)
                    {
                        <b id="@message.Message.Id">In reply to:</b>
                        <div class="message-item" id="@message.Message.Id">

                            <b id="@message.Message.Id">@message.ReplyTo.ReplyToMessageId</b>

                            <b id="@message.Message.Id">@message.ReplyTo.Created</b>

                            @if (message.ReplyTo.IsEdited == true)
                            {
                                <b id="@message.Message.Id">(Edited)</b>
                            }

                            <p id="@message.Message.Id">
                                @message.ReplyTo.Contents
                            </p>
                        </div>
                    }
                </li>
            }
            else
            {
                <li class="message-item">

                    <b>@message.OwnerName</b>
                    <b>@message.Message.Created</b>

                    @if (message.Message.IsEdited == true)
                    {
                        <b>(Edited)</b>
                    }

                    <p>
                        @message.Message.Contents
                    </p>

                    @if (message.ReplyTo != null)
                    {
                        <b id="@message.Message.Id">In reply to:</b>
                        <div class="message-item" id="@message.Message.Id">

                            <b id="@message.Message.Id">@message.ReplyTo.ReplyToMessageId</b>

                            <b id="@message.Message.Id">@message.ReplyTo.Created</b>

                            @if (message.ReplyTo.IsEdited == true)
                            {
                                <b id="@message.Message.Id">(Edited)</b>
                            }

                            <p id="@message.Message.Id">
                                @message.ReplyTo.Contents
                            </p>
                        </div>
                    }
                </li>
            }
        }
    </ul>
}

@using (Html.BeginForm("SendMessage", "Chat", FormMethod.Post))
{
    <div class="message-menu" id="message-menu">
        <textarea placeholder="Enter your message" value="@ViewData["Message"]" name="messageString"
              oninput='this.style.height = "";this.style.height = this.scrollHeight + "px"'></textarea>
        <span>
            <input type="submit" value="Send" title="Send" onclick="saveScroll()" />
            <button type="button" class="refresh-button" onclick="refreshMessages()">Refresh</button>
        </span>
    </div>
}

@using (Html.BeginForm("EditMessage", "Chat", FormMethod.Post))
{
    <div class="edit-message-menu" id="edit-message-menu">
        <textarea value="@ViewData["EditMessage"]" name="newContents" id="edit-message-input"
              oninput='this.style.height = "";this.style.height = this.scrollHeight + "px"'></textarea>
        <span>
            <input type="submit" value="Confirm" title="Confirm" onclick="saveScroll()" />
        </span>
    </div>
}

<script>

    let scrollPosition = window.sessionStorage.getItem("sidebar-scroll");

    let currentMessageId = "";

    const contextMenu = document.querySelector('.context-menu');

    const sendMessageMenu = document.querySelector('.message-menu');

    const editMessageMenu = document.querySelector('.edit-message-menu');

    const editMessageButton = document.querySelector('.context-menu__editbtn');

    const editMessageInput = document.getElementById('edit-message-input');

    const deleteForAllButton = document.querySelector('.context-menu__delforevrbtn');

    const deleteForSelfButton = document.querySelector('.context-menu__delbtn');

    function saveScroll() {
        window.sessionStorage.setItem("sidebar-scroll", window.scrollY);
    }

    if (scrollPosition !== null) {
        autoScrollTo(scrollPosition);
    }

    function autoScrollTo(scrollPosition) {

        document.documentElement.style.scrollBehavior = 'auto';

        setTimeout(() => window.scrollTo(0, scrollPosition), 5);
        setTimeout(() => document.documentElement.style.scrollBehavior = 'smooth', 5);
    }

    function showContextMenu(show = true) {
        contextMenu.style.display = show ? 'block' : 'none';
    }

    function showSendMessageMenu(show = true) {
        sendMessageMenu.style.display = show ? 'block' : 'none';
    }

    function showEditMessageMenu(show = true) {
        editMessageMenu.style.display = show ? 'block' : 'none';
    }

    function configureContextMenu(event) {

        showContextMenu();

        contextMenu.style.top = event.pageY + "px";

        contextMenu.style.left = event.pageX + "px";

        currentMessageId = event.target.id;
    }

    function refreshMessages() {

        saveScroll();

        location.reload();
    }

    window.addEventListener('contextmenu', (event) => {
        event.preventDefault();
    });

    window.addEventListener('click', () => {
        showContextMenu(false);
    });

    editMessageButton.addEventListener('click', () => {

        $.ajax({
            type: 'POST',
            url: '@Url.Action("SetMessageId","Chat")',
            data: {
                'messageId': currentMessageId
            }
        }).done((result) => {
            showSendMessageMenu(false);

            editMessageInput.value = result;

            showEditMessageMenu(true);
        });
    })

    deleteForAllButton.addEventListener('click', () => {

        saveScroll();

        $.ajax({
            type: 'POST',
            url: '@Url.Action("DeleteMessage","Chat")',
            data: {
                'messageId': currentMessageId
            }
        }).done(() => {
            refreshMessages();
        });
    });

    deleteForSelfButton.addEventListener('click', () => {

        saveScroll();

        $.ajax({
            type: 'POST',
            url: '@Url.Action("DeleteMessageForSelf","Chat")',
            data: {
                'messageId': currentMessageId
            }
        }).done(() => {
            refreshMessages();
        });
    })

</script>
